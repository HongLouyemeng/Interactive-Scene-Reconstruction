<launch>

  <!-- sequence -->
  <arg name="sequence" default="kinect2" />
  <arg name="use_vrep" default="false" />

  <!-- mode parameters -->
  <arg name="mapping" default="true" />
  <arg name="compute_localization" default="true" />
  <arg name="pub_point_cloud" default="true" />
  <arg name="localize_only" default="false" />
  <arg name="load_map" default="false" />
  <arg name="map_file" default="test.bin" />
  <!-- <arg name="map_file" default="VCLA38781.bin" /> -->
  <arg name="check_dynamic" default="false" />
  <arg name="GT_available" default="false" />
  <arg name="use_GT_mapping" default="false" />

  <!-- topic parameters -->
  <arg name="rgb_raw_topic" default="kinect2/qhd/image_color_rect" />
  <arg name="rgb_info_topic" default="kinect2/qhd/camera_info" />
  <arg name="depth_raw_topic" default="kinect2/qhd/image_depth_rect" />
  <arg name="depth_info_topic" default="kinect2/qhd/camera_info" />

  <arg name="depth_register_topic" default="camera/depth_registered/image" />
  <!-- <arg name="pt_register_topic" default="camera/depth_registered/points" /> -->

  <!-- frame parameters -->
  <arg name="camera_frame" default="camera_link" />
  <arg name="rgb_frame_id" default="kinect2_rgb_optical_frame" />
  <arg name="depth_frame_id" default="kinect2_rgb_optical_frame" />

  <!-- detection parameters -->
  <arg name="enable_openpose" default="false" />
  <arg name="enable_detectron" default="true" />
  <arg name="detectron_model" default="Pano_seg" />


  <!-- launch node for visualization -->
  <!-- <node name="rviz" pkg="rviz" type="rviz" required="true" args="-d $(find orb_slam2_ros)/rviz_cfg/TUM1.rviz" /> -->

  <!-- launch node for image processing and point cloud generation -->
  <!-- <include file="$(find depth_image_proc)/launch/depth_image_proc.launch" >

      <arg name="rgb_info_topic" value="$(arg rgb_info_topic)" />
      <arg name="depth_raw_topic" value="$(arg depth_raw_topic)" />
      <arg name="depth_info_topic" value="$(arg depth_info_topic)" />
      <arg name="depth_register_topic" value="$(arg depth_register_topic)" />

      <arg name="rgb_frame_id" value="$(arg rgb_frame_id)" />
      <arg name="depth_frame_id" value="$(arg depth_frame_id)" />

      <arg name="use_camera_frame" value="true" />
      <arg name="camera_frame_id" value="$(arg camera_frame)" />
      
  </include> -->
    
  <!-- launch node for detection -->
  <include file="$(find perception_ros)/launch/robot_perception.launch" >
      <arg name="use_vrep" value="$(arg use_vrep)" />  
      <!-- <arg name="check_dynamic" value="$(arg check_dynamic)" />  -->
      <arg name="pub_point_cloud" value="$(arg pub_point_cloud)" /> 
      <arg name="camera_frame" value="$(arg camera_frame)" />
      <arg name="use_GT_mapping" value="$(arg use_GT_mapping)" />
      
      <arg name="rgb_raw_topic" value="$(arg rgb_raw_topic)" />
      <arg name="rgb_info_topic" value="$(arg rgb_info_topic)" />
      <!-- <arg name="depth_raw_topic" value="$(arg depth_register_topic)" /> -->
      <arg name="depth_raw_topic" value="$(arg depth_raw_topic)" />
      <arg name="depth_info_topic" value="$(arg depth_info_topic)" />
      <!-- <arg name="depth_register_topic" value="$(arg depth_register_topic)" /> -->
      <arg name="enable_openpose" value="$(arg enable_openpose)" />
      <arg name="enable_detectron" value="$(arg enable_detectron)" />
      <arg name="detectron_model" value="$(arg detectron_model)" />

      <arg name="use_semantic_segmentation" value="false" />
      <arg name="use_geometric_segmentation" value="false" />
  </include>

  <!-- launch node for SLAM -->
  <include file="$(find orb_slam2_ros)/ros/launch/orb_slam2_RGBD.launch" if="$(arg compute_localization)" >
      <arg name="sequence" value="$(arg sequence)" />
      <arg name="localize_only" value="$(arg localize_only)" />
      <arg name="load_map" value="$(arg load_map)" />
      <arg name="map_file" value="$(arg map_file)" />
      <arg name="check_dynamic" value="$(arg check_dynamic)" />

      <arg name="camera_frame_id" value="$(arg camera_frame)" />
      <arg name="camera_frame_GT_id" value="$(arg rgb_frame_id)" />
      <arg name="use_vrep" value="$(arg use_vrep)" />  
      <arg name="GT_available" value="$(arg GT_available)" />  
      <!-- use default input topics from perception_node -->
      <arg name="rgb_raw_topic" value="$(arg rgb_raw_topic)" />
      <arg name="depth_raw_topic" value="$(arg depth_raw_topic)" /> 
      <!-- <arg name="depth_raw_topic" value="$(arg depth_register_topic)" />  -->
      
  </include>


  <!-- launch node for dense mapping -->
  <node name="voxblox_node" pkg="voxblox_ros" type="tsdf_server" output="screen" clear_params="true" if="$(arg mapping)">
      <remap from="pointcloud" to="/perception/seg_point_cloud"/>
      <param name="method" value="fast"/>
      <param name="tsdf_voxel_size" value="0.01" />
      <param name="tsdf_voxels_per_side" value="32" />
      <param name="voxel_carving_enabled" value="true" />
      <param name="enable_icp" value="false" />
      <param name="color_mode" value="color" />
      <param name="use_tf_transforms" value="true" />
      <param name="sensor_frame" value="$(arg camera_frame)" />

      <param name="world_frame" value="world" />
      <param name="update_mesh_every_n_sec" value="0.5" />
      <param name="verbose" value="true" />
      <param name="min_time_between_msgs_sec" value="0" />
      <param name="pointcloud_queue_size" value="10" />
      <param name="max_ray_length_m" value="5.0" />
      <param name="min_ray_length_m" value="0.2" />
      <param name="mesh_filename" value="$(find voxblox_ros)/mesh_results/$(anon TUM1).ply" />
  </node>

</launch>
